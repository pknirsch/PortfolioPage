---
title: "Creating Aesthetic GT Tables with Parameterized Markdown: Combining Currency Exchange Rates and Country Information"
description: "Exploring the synergy of web scraping and data visualization, I created an aesthetically pleasing GT table using a custom color palette. Leveraging currency exchange rate and country data, this project showcases the power of combining data sources"
date: "2023-03-06"
publishDate: "2023-03-06"
categories:
  - economics
  - analysis
  - code
  - data wrangling
  - R
  - data visualization
  - web scraping
  - data engineering
params:
  base: "USD"
---
In this post, I decided to delve into the realm of parameterized markdown and explore the art of crafting visually appealing GT tables. To kickstart this project, I began by creating a personalized color palette, inspired by the colors used in my website theme. This palette adds a touch of visual elegance to my tables.

To streamline the process of accessing the color hex codes, I developed a custom function. This function allowed me to easily retrieve the hex codes associated with common color names that I had assigned. Now armed with my custom color palette, I was ready to embark on creating captivating GT tables.

My first step was to utilize the parameter `base = "USD"` to generate a GT table sourced from a currency exchange rate API. This table provided valuable information on currency exchange rates relative to the US dollar. However, I wanted to enhance its value by merging it with another table I had scraped, containing country names and currency symbols for various foreign currencies. This integration would offer a comprehensive view of the currencies in a visually pleasing format.

Finally, it was time to bring all the elements together and create an aesthetically pleasing GT table. Leveraging the power of the `gt` package in R, I utilized the color palette function I had created to infuse my table with visually appealing hues. The combination of data from multiple sources, enriched by the vibrant color palette, resulted in a visually captivating and informative table.

Projects that involve web scraping always ignite my excitement, and this endeavor was no exception. The opportunity to create visually pleasing tables by amalgamating data from diverse sources provides the perfect excuse to sharpen my web scraping skills. Rest assured, there will be more exciting projects on the horizon.

Stay tuned for further explorations, as I continue to merge data sources and experiment with aesthetics.

```{r, warning=FALSE, message=FALSE}
# dependencies
library(tidyverse)
library(rvest)
library(jsonlite)
library(gt)

# creating color palette
p_pal <- c(
  `white`= "#FFFFFF",
  `mid-blue` = "#5688c1",
  `light-blue` = "#b8cee6",
  `dark-blue` = "#0454a4",
  `light-mid-blue` = "#7ca4d4")

# creating function to call upon colors in my custom palette
my_pal <- function(...) {
  cols <- c(...)
  if (is.null(cols))
  return (p_pal)
  p_pal[cols]
}



# accessing API
url <- URLencode(paste0('https://api.exchangerate.host/latest/?base=', params$base))
  # get JSON
  currencies <- jsonlite::fromJSON(url)
  # turn data into tibble
  rates <- tibble::as_tibble(currencies$rates)
  # put in better format
  rates <- rates %>% 
    tidyr::pivot_longer(everything(), names_to = "currency", values_to = "rate") %>% 
    dplyr::mutate(base = paste0(params$base))
  
# read HTML code from webpage with currency symbols
 symbols <- read_html("https://www.eurochange.co.uk/travel/tips/world-currency-abbreviations-symbols-and-codes-travel-money") %>%
  html_table

# select rows from table that match currency rates
symbols <- symbols[[1]]
symbols <- rename(symbols, currency = `Currency Code`)

# join two tables together
rates <- right_join(rates, symbols, by = "currency")
rates <- rates[, c(3, 2, 1, 4, 5)]

# create GT table  
rates %>% 
  gt() %>% 
  # add title and subtitle
  tab_header(
    title = md(paste0("**Currency Rates Relative to ", params$base,"**")),
    subtitle = ""
  ) %>%
  # align the text to center
  cols_align(
    align = "center") %>% 
  # change names of columns
  cols_label(
    currency = "Currency Code",
    rate = md("**Exchange Rate**"),
    base = "Base"
  ) %>%
  # change colors of headers and column using custom palette function
  tab_options(column_labels.background.color = my_pal("mid-blue"),
              heading.background.color = my_pal("dark-blue")) %>% 
  tab_style(
    style = list(
      cell_fill(my_pal("light-blue")),
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = rate
    )
  )  %>% 
  # add reference footnote
  tab_source_note(
    source_note = html("Source: <b>2023 World Currency Symbols</b>, <a href ='https://www.eurochange.co.uk/travel/tips/world-currency-abbreviations-symbols-and-codes-travel-money'>eurochange.co.uk</a>.<br>Source: <b>Foreign & Crypto Exchange Rates API</b>, <a href ='https://exchangerate.host/'>exchangerate.host</a>.")
  )
```
